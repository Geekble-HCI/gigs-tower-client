---
description: Samyang Pop Game Client 프로젝트를 위한 개발 규칙
globs:
  - "**/*.py"
  - "**/*.ino"
  - "**/*.sh"
  - "**/*.md"
  - "**/*.txt"
alwaysApply: true
---

# Samyang Pop Game Client 개발 규칙

이 프로젝트는 삼양식품의 팝업 게임 클라이언트로, 6가지 게임(헬시 버거, 꿀잠 방해꾼, 칼로리 머신, 볼볼볼 영양소, 에어시소, 슛잇 골대)을 지원하는 IoT 게임 시스템입니다.

## 🏗️ 프로젝트 구조

```
samyang-pop-client/
├── pop-client.py          # 메인 엔트리 포인트
├── gigs.py               # 핵심 게임 클래스 (GIGS)
├── Module/               # 핵심 모듈들
│   ├── game_handler.py   # 게임 로직 처리
│   ├── game_state.py     # 게임 상태 관리
│   ├── screen_manager.py # 화면 표시 관리
│   ├── sound_manager.py  # 사운드 관리 (싱글톤)
│   ├── mqtt_manager.py   # MQTT 통신 관리
│   ├── serial_handler.py # 시리얼 통신
│   └── tcp_handler.py    # TCP 통신
├── ESP32/               # ESP32 펌웨어
├── Shell/               # 자동 시작 스크립트
└── Sound/               # 게임별 사운드 파일
```

## 📋 코딩 컨벤션

### 1. Python 스타일 가이드

#### 1.1 네이밍 규칙
- **클래스**: `PascalCase` (예: `GameStateManager`, `SoundManager`)
- **함수/메서드**: `snake_case` (예: `start_countdown`, `handle_command`)
- **변수**: `snake_case` (예: `game_type`, `current_state`)
- **상수**: `UPPER_SNAKE_CASE` (예: `GAME_MESSAGES`, `MARGIN_LEFT`)
- **프라이빗 메서드**: `_snake_case` (예: `_on_start`, `_build_payload`)

#### 1.2 문서화
- 모든 클래스와 public 메서드에 docstring 작성
- 복잡한 로직에는 인라인 주석 추가
- TODO 형식: `# TODO:(작성자):(주제) - 내용`

#### 1.3 타입 힌트
```python
def show_score(self, score: int | float) -> None:
    """점수 화면 표시"""
    pass

def _build_payload(self, state: str, score: int | float | None = None) -> dict:
    """MQTT 페이로드 생성"""
    pass
```

### 2. 게임 상태 관리

#### 2.1 게임 상태 흐름
```
INIT → WAITING → COUNTDOWN → PLAYING → SCORE → RESULT → WAITING
     ↘ ENTER                                          ↗
     ↘ EXIT                                          ↗
```

#### 2.2 상태별 사운드 매핑
- `INIT`: `init.mp3`
- `WAITING`: `wait.wav`
- `COUNTDOWN`: `countdown.wav`
- `PLAYING`: `playing_{game_type}.wav` (1-6)
- `SCORE`: `score.wav`
- `RESULT`: `result.wav`
- `ENTER`: `enter.wav`
- `EXIT`: `exit.wav`

### 3. 통신 프로토콜

#### 3.1 MQTT 토픽 구조
```
device/register              # 장치 등록
device/{ip_address}/state    # 상태 발행
device/{ip_address}/command  # 명령 수신
device/{device_id}/state     # 장치별 상태
device/{device_id}/command   # 장치별 명령
```

#### 3.2 명령 타입
- `GAME_START`: 게임 시작/진행
- `GAME_STOP`: 게임 중지 (점수 표시)
- `GAME_RESET`: 게임 초기화
- `VOLUME`: 볼륨 조절 (0.0-1.0)

### 4. 하드웨어 통합

#### 4.1 ESP32 통신
- **RFID 카드 감지**: 시리얼 통신으로 'a' 전송
- **재시도 설정**: `nfc.setPassiveActivationRetries(0xFF)`
- **지연 시간**: 카드 감지 후 5초 대기

#### 4.2 화면 마진 설정
```python
MARGIN_LEFT = 68    # 좌측 마진
MARGIN_TOP = 248    # 상단 마진
MARGIN_RIGHT = 48   # 우측 마진
MARGIN_BOTTOM = 38  # 하단 마진
```

## 🎮 게임별 설정

### 게임 타입 매핑
1. **헬시 버거 챌린지** (`--type 1`)
2. **꿀잠 방해꾼 OUT!** (`--type 2`)
3. **불태워! 칼로링머신** (`--type 3`)
4. **볼볼볼 영양소** (`--type 4`)
5. **바이오데이터 에어시소** (`--type 5`)
6. **슛잇! 무빙 골대** (`--type 6`)

### 자동 시작 스크립트 예시
```bash
#!/bin/bash
cd /home/sood/Desktop/samyang-pop-client
source venv/bin/activate
python3 pop-client.py --type 6 --device_id 6
```

## 🔧 개발 가이드라인

### 1. 싱글톤 패턴 (SoundManager)
- `SoundManager`는 싱글톤으로 구현
- 게임 타입별 사운드 파일 자동 로드
- 볼륨 제어 및 BGM/SFX 분리 관리

### 2. 스레드 안전성
- 화면 업데이트: 메인 스레드에서만 실행
- 백그라운드 작업: 별도 스레드 사용 (`daemon=True`)
- 메시지 큐: `queue.Queue()` 사용

### 3. 에러 처리
```python
try:
    score = float(message)
    if score > 0 and self.game_state.current_state == GameState.PLAYING:
        self.score_manager.add_score(score)
except ValueError:
    print(f"Invalid message format: {message}")
```

### 4. 리소스 관리
- 사운드 파일 로드 실패 시 기본값 사용
- 스레드 정리: `thread.join(0)` 사용
- MQTT 연결 상태 확인 후 메시지 발행

## 🧪 테스트 모드

### 테스트 실행
```bash
python3 pop-client.py --type 5 --device_id 5 --test
```

### 키보드 입력
- **A**: 게임 시작/카운트다운
- **B**: 점수 표시 (플레이 중)
- **ESC**: 종료

## 📦 의존성 관리

### 핵심 라이브러리
- `pygame`: 화면 및 사운드 관리
- `paho-mqtt`: MQTT 통신
- `pyserial`: 시리얼 통신
- `keyboard`: 키보드 입력 처리

### 설치 명령
```bash
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
```

## 🚨 주의사항

1. **MQTT 브로커 스캔**: 최대 0.3초 타임아웃, 50개 스레드 사용
2. **연결 블로킹**: 초기 연결 실패 시 프로그램 종료
3. **장치 등록**: 연결 직후 반드시 등록 메시지 발행
4. **볼륨 범위**: 0.0-1.0 사이 값만 허용
5. **게임 타이머**: 플레이 60초, 점수 대기 15초 (설정 가능)

이 규칙을 따라 코드를 작성하면 일관성 있고 유지보수 가능한 Game Client를 개발할 수 있습니다.
